#ifndef AONT_H
#define AONT_H

#include "cauchy_rs.h"
#include "sha3.h"
#include "speck.h"

//This messy ifdef block makes it so that the library will compile properly in 
//both the kernel and in userspace 
#ifndef __KERNEL__
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/random.h>
#define aont_malloc(X) malloc(X)
#define aont_free(X) free(X)
#else
#include <linux/types.h>
#include <linux/slab.h>
#include <linux/random.h>
#define aont_malloc(X) kmalloc(X, GFP_KERNEL)
#define aont_free(X) kfree(X)
#endif

#define CANARY_SIZE 16

//TODO don't have the key size hardcoded to 256 bits
#define KEY_SIZE 32
#define KEY_SIZE_INT64 4

/**
 * Calculates the size of a share
 */
static inline size_t get_share_size(size_t data_length, size_t data_blocks){
    return (data_length + CANARY_SIZE + KEY_SIZE) / data_blocks;
}

int encrypt_payload(uint8_t *data, const size_t datasize, uint8_t *key, size_t keylength, int enc);

/**
 * Encode data contained in the data buffer into data_blocks+parity_blocks number of shares using AONT-RS
 * The shares array should be allocated before calling this function. The length of each share can be determined
 * using the function get_share_size()
 * This function assumes a 256 bit key and hash is used.
 * For the purpose that this library was written for we wanted the difference (XOR of hash and key) to be store seperately
 * from the shares.
 *
 * difference: a 256 bit buffer to hold bitwise XOR of the encryption key and the hash of the ciphertext 
 * data: the input data to be encoded
 * data_length: length of the input data
 * shares: 2 dimensional array of shares generated by the function
 * data_blocks: number of data shares (equal to the reconstruction threshold)
 * parity_blocks: number of redundant shares
 * nonce: array of two 64 bit integers makes up a 128 bit nonce
 */
int encode_aont_package(uint8_t *difference, const uint8_t *data, size_t data_length, uint8_t **shares, size_t data_blocks, size_t parity_blocks, uint64_t *nonce);

/**
 * Decodes a set of shares using AONT-RS and places the reconstructed data into the data buffer
 *
 *
 * difference: The 256 bit buffer containing the bitwise XOR of the cryptographic key and the ciphertext hash
 * data: output buffer for the function
 * data_length: expected length of the output buffer
 * shares: array of shares to be decoded
 * data_blocks: reconstruction threshold
 * parity_blocks: number of redundant blocks
 * nonce: array of two 64 bit integers makes up a 128 bit nonce for encryption purposes
 * erasures: an array identifying erasures (used for reed-solomon decoding)
 * num_erasures: the number of total known erasures.
 */
int decode_aont_package(uint8_t *difference, uint8_t *data, size_t data_length, uint8_t **shares, size_t data_blocks, size_t parity_blocks, uint64_t *nonce, uint8_t *erasures, uint8_t num_erasures);


#endif
